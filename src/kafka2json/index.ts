/**
 * Welcome to Kafka2JSON!
 *
 * Some design decisions:
 * - Schema objects are arrays instead of straight-up objects, so that we can keep the
 * 	 ordering of keys.
 * 		[{ myFirstKey: Primitive.Int16 }, { mySecondKey: Primitive.Int16 }]
 * 									represents
 * 			{ myFirstKey: Primitive.Int16, mySecondKey: Primitive.Int16 }
 *
 * - Schema arrays are encapsulated in two arrays.
 * 		[[{ myFirstKey: Primitive.Int16 }], [{ mySecondKey: Primitive.Int16 }]]
 * 									represents
 * 		 [{ myFirstKey: Primitive.Int16 }, { mySecondKey: Primitive.Int16 }]
 *
 * - Schema arrays can only contain objects. It's pretty annoying and I may make it so
 * 	 that you can have primitives in there, but it doesn't change too much.
 *
 * - Also this was 90% generated by ChatGPT.
 */

export enum Primitive {
	Boolean = "Boolean",
	Int8 = "Int8",
	Int16 = "Int16",
	Int32 = "Int32",
	Int64 = "Int64",
	String = "String",
	NullableString = "NullableString",
	Bytes = "Bytes",
	VarInt = "VarInt",
	VarLong = "VarLong",
	VarIntBytes = "VarIntBytes",
}

type SchemaValue = { [key: string]: Primitive | Schema[] | Schema }
export type Schema = SchemaValue[]

export const HeaderRequestSchema: Schema = [
	{ apiKey: Primitive.Int16 },
	{ apiVersion: Primitive.Int16 },
	{ correlationId: Primitive.Int32 },
	{ clientId: Primitive.String },
]
export interface HeaderRequest {
	apiKey: number
	correlationId: number
	clientId: string
}

export const HeaderResponseSchema: Schema = [{ correlationId: Primitive.Int32 }]
export interface HeaderResponse {
	correlationId: number
}

export const ApiVersionsRequestSchema: Schema = [...HeaderRequestSchema]
export type ApiVersionsRequest = {
	name: "ApiVersions"
	apiVersion: 1
} & HeaderRequest

export const ApiVersionsResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ errorCode: Primitive.Int16 },
	{
		apiVersions: [
			[
				{ apiKey: Primitive.Int16 },
				{ minVersion: Primitive.Int16 },
				{ maxVersion: Primitive.Int16 },
			],
		],
	},
]
export type ApiVersionsResponse = HeaderResponse & {
	errorCode: number
	apiVersions: {
		apiKey: number
		minVersion: number
		maxVersion: number
	}[]
}

export const FindCoordinatorV1RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ key: Primitive.String },
	{ keyType: Primitive.Int8 },
]
export type FindCoordinatorV1Request = {
	name: "FindCoordinatorV1"
	apiVersion: 1
	key: string
	keyType: number
} & HeaderRequest

export const FindCoordinatorV1ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
	{ errorMessage: Primitive.NullableString },
	{ nodeId: Primitive.Int32 },
	{ host: Primitive.String },
	{ port: Primitive.Int32 },
]
export type FindCoordinatorV1Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
	errorMessage: string | null
	nodeId: number
	host: string
	port: number
}

export const JoinGroupV5RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{ sessionTimeoutMs: Primitive.Int32 },
	{ rebalanceTimeoutMs: Primitive.Int32 },
	{ memberId: Primitive.String },
	{ groupInstanceId: Primitive.NullableString },
	{ protocolType: Primitive.String },
	{
		protocols: [
			[
				{ protocolName: Primitive.String },
				{
					metadata: [
						{ version: Primitive.Int16 },
						{ topics: [[{ topicName: Primitive.String }]] },
						{ userData: Primitive.Bytes },
					],
				},
			],
		],
	},
]
export type JoinGroupV5Request = {
	name: "JoinGroupV5"
	apiVersion: 5
	groupId: string
	sessionTimeoutMs: number
	rebalanceTimeoutMs: number
	memberId: string
	groupInstanceId: string | null
	protocolType: string
	protocols: {
		protocolName: string
		metadata: {
			version: number
			topics: {
				topicName: string
			}[]
			userData: Buffer
		}
	}[]
} & HeaderRequest

export const JoinGroupV5ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
	{ generationId: Primitive.Int32 },
	{ protocolName: Primitive.String },
	{ leader: Primitive.String },
	{ memberId: Primitive.String },
	{
		members: [
			[
				{ memberId: Primitive.String },
				{ groupInstanceId: Primitive.NullableString },
				{
					metadata: [
						{ version: Primitive.Int16 },
						{ topics: [[{ topicName: Primitive.String }]] },
						{ userData: Primitive.Bytes },
					],
				},
			],
		],
	},
]
export type JoinGroupV5Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
	generationId: number
	protocolName: string
	leader: string
	memberId: string
	members: {
		memberId: string
		groupInstanceId: string | null
		metadata: {
			version: number
			topics: {
				topicName: string
			}[]
			userData: Buffer
		}
	}[]
}

export const LeaveGroupV2RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{ memberId: Primitive.String },
]
export type LeaveGroupV2Request = {
	name: "LeaveGroupV2"
	apiVersion: 2
	groupId: string
	memberId: string
} & HeaderRequest

export const LeaveGroupV2ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
]
export type LeaveGroupV2Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
}

export const DescribeGroupsV3RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groups: [[{ groupId: Primitive.String }]] },
	{ includeAuthorizedOperations: Primitive.Boolean },
]
export type DescribeGroupsV3Request = {
	name: "DescribeGroupsV3"
	apiVersion: 3
	groups: {
		groupId: string
	}[]
	includeAuthorizedOperations: boolean
} & HeaderRequest

export const DescribeGroupsV3ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{
		groups: [
			[
				{ errorCode: Primitive.Int16 },
				{ groupId: Primitive.String },
				{ state: Primitive.String },
				{ protocolType: Primitive.String },
				{ protocolData: Primitive.String },
				{
					members: [
						[
							{ memberId: Primitive.String },
							{ clientId: Primitive.String },
							{ clientHost: Primitive.String },
							{ memberMetadata: Primitive.Bytes },
							{
								memberAssignment: [
									{ version: Primitive.Int16 },
									{
										partitionAssignment: [
											[
												{ topicName: Primitive.String },
												{ partitions: [[{ partitionIndex: Primitive.Int32 }]] },
											],
										],
									},
									{ userData: Primitive.Bytes },
								],
							},
						],
					],
				},
			],
		],
	},
]
export type DescribeGroupsV3Response = HeaderResponse & {
	throttleTimeMs: number
	groups: {
		errorCode: number
		groupId: string
		state: string
		protocolType: string
		protocolData: string
		members: {
			memberId: string
			clientId: string
			clientHost: string
			memberMetadata: Buffer
			memberAssignment: {
				version: number
				partitionAssignment: {
					topicName: string
					partitions: {
						partitionIndex: number
					}
				}[]
				userData: Buffer
			}
		}[]
	}[]
}

export const MetadataV7RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ topics: [[{ topicName: Primitive.String }]] },
	{
		allowAutoTopicCreation: Primitive.Boolean,
	},
]
export type MetadataV7Request = {
	name: "MetadataV7"
	apiVersion: 7
	topics: {
		topicName: string
	}[]
	allowAutoTopicCreation: boolean
} & HeaderRequest

export const MetadataV7ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{
		brokers: [
			[
				{ nodeId: Primitive.Int32 },
				{ host: Primitive.String },
				{ port: Primitive.Int32 },
				{ rack: Primitive.NullableString },
			],
		],
	},
	{ clusterId: Primitive.NullableString },
	{ controllerId: Primitive.Int32 },
	{
		topics: [
			[
				{ errorCode: Primitive.Int16 },
				{ topicName: Primitive.String },
				{ isInternal: Primitive.Boolean },
				{
					partitions: [
						[
							{ errorCode: Primitive.Int16 },
							{ partitionIndex: Primitive.Int32 },
							{ leader: Primitive.Int32 },
							{ leaderEpoch: Primitive.Int32 },
							{ replicaNodes: Primitive.Int32 },
							{ isrNodes: Primitive.Int32 },
							{ offlineReplicas: Primitive.Int32 },
						],
					],
				},
			],
		],
	},
]
export type MetadataV7Response = HeaderResponse & {
	throttleTimeMs: number
	brokers: {
		nodeId: number
		host: string
		port: number
		rack: string | null
	}[]
	clusterId: string | null
	controllerId: number
	topics: {
		errorCode: number
		topicName: string
		isInternal: boolean
		partitions: {
			errorCode: number
			partitionIndex: number
			leader: number
			leaderEpoch: number
			replicaNodes: number
			isrNodes: number
			offlineReplicas: number
		}[]
	}[]
}

export const SyncGroupV1RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{ generationId: Primitive.Int32 },
	{ memberId: Primitive.String },
	{
		assignments: [
			[
				{ memberId: Primitive.String },
				{
					memberAssignment: [
						{ version: Primitive.Int16 },
						{
							partitionAssignment: [
								[
									{ topicName: Primitive.String },
									{ partitions: [[{ partitionIndex: Primitive.Int32 }]] },
								],
							],
						},
						{ userData: Primitive.Bytes },
					],
				},
			],
		],
	},
]
export type SyncGroupV1Request = {
	name: "SyncGroupV1"
	apiVersion: 1
	groupId: string
	generationId: number
	memberId: string
	assignments: {
		memberId: string
		memberAssignment: {
			version: number
			partitionAssignment: {
				topicName: string
				partitions: {
					partitionIndex: number
				}[]
			}[]
			userData: Buffer
		}
	}[]
} & HeaderRequest

export const SyncGroupV1ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
	{
		memberAssignment: [
			{ version: Primitive.Int16 },
			{
				partitionAssignment: [
					[
						{ topicName: Primitive.String },
						{ partitions: [[{ partitionIndex: Primitive.Int32 }]] },
					],
				],
			},
			{ userData: Primitive.Bytes },
		],
	},
]
export type SyncGroupV1Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
	memberAssignment: {
		version: number
		partitionAssignment: {
			topicName: string
			partitions: {
				partitionIndex: number
			}[]
		}[]
		userData: Buffer
	}
}

export const FetchV11RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ replicaId: Primitive.Int32 },
	{ maxWaitTime: Primitive.Int32 },
	{ minBytes: Primitive.Int32 },
	{ maxBytes: Primitive.Int32 },
	{ isolationLevel: Primitive.Int8 },
	{ sessionId: Primitive.Int32 },
	{ sessionEpoch: Primitive.Int32 },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ currentLeaderEpoch: Primitive.Int32 },
							{ fetchOffset: Primitive.Int64 },
							{ logStartOffset: Primitive.Int64 },
							{ partitionMaxBytes: Primitive.Int32 },
						],
					],
				},
			],
		],
	},
	{
		forgottenTopicsData: [
			[
				{ topicName: Primitive.String },
				{ partitions: [[{ partitionIndex: Primitive.Int32 }]] },
			],
		],
	},
	{ rackId: Primitive.String },
]
export type FetchV11Request = {
	name: "FetchV11"
	apiVersion: 11
	replicaId: number
	maxWaitTime: number
	minBytes: number
	maxBytes: number
	isolationLevel: number
	sessionId: number
	sessionEpoch: number
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			currentLeaderEpoch: number
			fetchOffset: bigint
			logStartOffset: bigint
			partitionMaxBytes: number
		}[]
	}[]
	forgottenTopicsData: {
		topicName: string
		partitions: {
			partitionIndex: number
		}[]
	}[]
	rackId: string
} & HeaderRequest

export const FetchV11ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
	{ sessionId: Primitive.Int32 },
	{
		responses: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ errorCode: Primitive.Int16 },
							{ highWatermark: Primitive.Int64 },
							{ lastStableOffset: Primitive.Int64 },
							{ logStartOffset: Primitive.Int64 },
							{
								abortedTransactions: [
									[
										{ producerId: Primitive.Int64 },
										{ firstOffset: Primitive.Int64 },
									],
								],
							},
							{ preferredReadReplica: Primitive.Int32 },
							{
								recordSet: [
									{ firstOffset: Primitive.Int64 },
									{ recordLength: Primitive.Int32 },
									{ partitionLeaderEpoch: Primitive.Int32 },
									{ magic: Primitive.Int8 },
									{ crc: Primitive.Int32 },
									{ attributes: Primitive.Int16 },
									{ lastOffsetDelta: Primitive.Int32 },
									{ firstTimestamp: Primitive.Int64 },
									{ maxTimestamp: Primitive.Int64 },
									{ producerId: Primitive.Int64 },
									{ producerEpoch: Primitive.Int16 },
									{ firstSequence: Primitive.Int32 },
									{
										records: [
											[
												{ length: Primitive.VarInt },
												{ attributes: Primitive.Int8 },
												{ timestampDelta: Primitive.VarLong },
												{ offsetDelta: Primitive.VarInt },
												{ key: Primitive.VarIntBytes },
												{ value: Primitive.VarIntBytes },
											],
										],
									},
								],
							},
						],
					],
				},
			],
		],
	},
]

export type FetchV11Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
	sessionId: number
	responses: {
		topicName: string
		partitions: {
			partitionIndex: number
			errorCode: number
			highWatermark: bigint
			lastStableOffset: bigint
			logStartOffset: bigint
			abortedTransactions: {
				producerId: bigint
				firstOffset: bigint
			}[]
			preferredReadReplica: number
			recordSet?: {
				firstOffset: bigint
				recordLength: number
				partitionLeaderEpoch: number
				magic: number
				crc: number
				attributes: number
				lastOffsetDelta: number
				firstTimestamp: bigint
				maxTimestamp: bigint
				producerId: bigint
				producerEpoch: number
				firstSequence: number
				records: {
					length: number
					attributes: number
					timestampDelta: bigint
					offsetDelta: number
					key: Buffer
					value: Buffer
				}[]
			}
		}[]
	}[]
}

export const HeartBeatV3RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{ generationId: Primitive.Int32 },
	{ memberId: Primitive.String },
	{ groupInstanceId: Primitive.NullableString },
]
export type HeartBeatV3Request = {
	name: "HeartBeatV3"
	apiVersion: 3
	groupId: string
	generationId: number
	memberId: string
	groupInstanceId: string | null
} & HeaderRequest

export const HeartBeatV3ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{ errorCode: Primitive.Int16 },
]
export type HeartBeatV3Response = HeaderResponse & {
	throttleTimeMs: number
	errorCode: number
}

export const ListOffsetsV3RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ replicaId: Primitive.Int32 },
	{ isolationLevel: Primitive.Int8 },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ timestamp: Primitive.Int64 },
						],
					],
				},
			],
		],
	},
]
export type ListOffsetsV3Request = {
	name: "ListOffsetsV3"
	apiVersion: 3
	replicaId: number
	isolationLevel: number
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			timestamp: bigint
		}[]
	}[]
} & HeaderRequest

export const ListOffsetsV3ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ errorCode: Primitive.Int16 },
							{ timestamp: Primitive.Int64 },
							{ offset: Primitive.Int64 },
						],
					],
				},
			],
		],
	},
]
export type ListOffsetsV3Response = HeaderResponse & {
	throttleTimeMs: number
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			errorCode: number
			timestamp: bigint
			offset: bigint
		}[]
	}[]
}

export const OffsetFetchV5RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [[{ partitionIndex: Primitive.Int32 }]],
				},
			],
		],
	},
]
export type OffsetFetchV5Request = {
	name: "OffsetFetchV5"
	apiVersion: 5
	groupId: string
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
		}[]
	}[]
} & HeaderRequest

export const OffsetFetchV5ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ committedOffset: Primitive.Int64 },
							{ committedLeaderEpoch: Primitive.Int32 },
							{ metadata: Primitive.NullableString },
							{ errorCode: Primitive.Int16 },
						],
					],
				},
			],
		],
	},
]
export type OffsetFetchV5Response = HeaderResponse & {
	throttleTimeMs: number
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			committedOffset: bigint
			committedLeaderEpoch: number
			metadata: string | null
			errorCode: number
		}[]
	}[]
}

export const OffsetCommitV5RequestSchema: Schema = [
	...HeaderRequestSchema,
	{ groupId: Primitive.String },
	{ generationId: Primitive.Int32 },
	{ memberId: Primitive.String },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ committedOffset: Primitive.Int64 },
							{ committedMetadata: Primitive.NullableString },
						],
					],
				},
			],
		],
	},
]
export type OffsetCommitV5Request = {
	name: "OffsetCommitV5"
	apiVersion: 5
	groupId: string
	generationId: number
	memberId: string
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			committedOffset: bigint
			committedMetadata: string | null
		}[]
	}[]
} & HeaderRequest

export const OffsetCommitV5ResponseSchema: Schema = [
	...HeaderResponseSchema,
	{ throttleTimeMs: Primitive.Int32 },
	{
		topics: [
			[
				{ topicName: Primitive.String },
				{
					partitions: [
						[
							{ partitionIndex: Primitive.Int32 },
							{ errorCode: Primitive.Int16 },
						],
					],
				},
			],
		],
	},
]
export type OffsetCommitV5Response = HeaderResponse & {
	throttleTimeMs: number
	topics: {
		topicName: string
		partitions: {
			partitionIndex: number
			errorCode: number
		}[]
	}[]
}

export type AllRequests =
	| ApiVersionsRequest
	| FindCoordinatorV1Request
	| JoinGroupV5Request
	| LeaveGroupV2Request
	| DescribeGroupsV3Request
	| MetadataV7Request
	| SyncGroupV1Request
	| FetchV11Request
	| HeartBeatV3Request
	| ListOffsetsV3Request
	| OffsetFetchV5Request
	| OffsetCommitV5Request

export const apiMapToEverything: {
	[K in AllRequests["name"]]: any
} = {
	ApiVersions: {
		requestKey: 18,
		schema: ApiVersionsRequestSchema,
		responseSchema: ApiVersionsResponseSchema,
	},
	FindCoordinatorV1: {
		requestKey: 10,
		schema: FindCoordinatorV1RequestSchema,
		responseSchema: FindCoordinatorV1ResponseSchema,
	},
	JoinGroupV5: {
		requestKey: 11,
		schema: JoinGroupV5RequestSchema,
		responseSchema: JoinGroupV5ResponseSchema,
	},
	LeaveGroupV2: {
		requestKey: 13,
		schema: LeaveGroupV2RequestSchema,
		responseSchema: LeaveGroupV2ResponseSchema,
	},
	DescribeGroupsV3: {
		requestKey: 15,
		schema: DescribeGroupsV3RequestSchema,
		responseSchema: DescribeGroupsV3ResponseSchema,
	},
	MetadataV7: {
		requestKey: 3,
		schema: MetadataV7RequestSchema,
		responseSchema: MetadataV7ResponseSchema,
	},
	SyncGroupV1: {
		requestKey: 14,
		schema: SyncGroupV1RequestSchema,
		responseSchema: SyncGroupV1ResponseSchema,
	},
	FetchV11: {
		requestKey: 1,
		schema: FetchV11RequestSchema,
		responseSchema: FetchV11ResponseSchema,
	},
	HeartBeatV3: {
		requestKey: 12,
		schema: HeartBeatV3RequestSchema,
		responseSchema: HeartBeatV3ResponseSchema,
	},
	ListOffsetsV3: {
		requestKey: 2,
		schema: ListOffsetsV3RequestSchema,
		responseSchema: ListOffsetsV3ResponseSchema,
	},
	OffsetFetchV5: {
		requestKey: 9,
		schema: OffsetFetchV5RequestSchema,
		responseSchema: OffsetFetchV5ResponseSchema,
	},
	OffsetCommitV5: {
		requestKey: 8,
		schema: OffsetCommitV5RequestSchema,
		responseSchema: OffsetCommitV5ResponseSchema,
	},
}
